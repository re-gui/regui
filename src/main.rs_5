use std::{error::Error, rc::Rc, any::Any};

use native_windows_gui as nwg;
use nwg::ControlHandle;
use regui::{component::Component, context::Context, visitor::Visitor};

fn main() -> Result<(), Box<dyn Error>> {
    println!("Hello, world!");

    nwg::init().expect("Failed to init Native Windows GUI");
    nwg::Font::set_global_family("Segoe UI").expect("Failed to set default font");

    let win = WindowNode::new();

    let ui = MyAppUi {};

    ui.show(visitor);

    let events_window = win.window.clone();

    let handler = nwg::full_bind_event_handler(&win.window.handle, move |evt, _evt_data, handle| {
        use nwg::Event as E;

        match evt {
            E::OnWindowClose => 
                if &handle == &events_window as &nwg::Window {
                    //nwg::modal_info_message(&events_window.handle, "Goodbye", &format!("Goodbye {}", name_edit.text()));
                    nwg::modal_info_message(&events_window.handle, "Goodbye", &format!("Goodbye"));
                    nwg::stop_thread_dispatch();
                },
            //E::OnButtonClick => 
            //    if &handle == &hello_button {
            //        nwg::modal_info_message(&events_window.handle, "Hello", &format!("Hello {}", name_edit.text()));
            //    },
            _ => {}
        }
    });

    nwg::dispatch_thread_events();
    nwg::unbind_event_handler(&handler);

    Ok(())
}

struct MyAppUi {
}

impl Component<WinContext> for MyAppUi {
    fn show(&mut self, visitor: &mut WinVisitor) {
    }
}


struct WinNode {
    window: Rc<dyn Any>,
    children: Vec<WinNode>,
}

impl WinNode {
    fn new_window() -> Self {
        let mut window = Default::default();
        nwg::Window::builder()
            .size((300, 115))
            .position((300, 300))
            .title("Basic example")
            .build(&mut window)
            .unwrap();
        //window.set_position(10, 10);
        let window = Rc::new(window);
        Self {
            window,
            children: Vec::new(),
        }
    }

    fn new_button<P: Into<ControlHandle>>(parent: P) -> Self {
        let mut button = Default::default();
        nwg::Button::builder()
            .text("Hello")
            .parent(parent)
            .build(&mut button)
            .unwrap();
        let button = Rc::new(button);
        Self {
            window: button,
            children: Vec::new(),
        }
    }
}

struct Button {
}

impl Component<WinContext> for Button {
    fn show<'a>(&mut self, visitor: &mut <WinContext as Context>::Visitor<'a>) {
        todo!()
    }
}

struct WinContext {
}

impl Context for WinContext {
    type Visitor<'a> = WinVisitor<'a>;
}

struct WinVisitor<'a> {
    node: &'a mut Vec<WinNode>,
}

impl<'a> Visitor for WinVisitor<'a> {
}

